name: NanoPi-R4S-fw3
on:
  push:
    branches: 
      - main
    paths:
      - '.github/workflows/r4s-fw3.yml'
#  schedule:
 #   - cron: '00 00 * * *'

jobs:
  build:
    runs-on: ubuntu-22.04
    if: github.event.repository.owner.id == github.event.sender.id
    steps:
    - name: Show system
      run: |
        echo -e "Total CPU cores\t: $(nproc)"
        cat /proc/cpuinfo | grep 'model name'
        cpu_name=$(cat /proc/cpuinfo | grep "model name" | head -n 1 | awk -F: '{print $2}' | sed 's/^[ \t]*//')
        ulimit -a
    - name: Checkout
      uses: actions/checkout@main
    - name: Init build dependencies
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt-get -qq update
        sudo /bin/bash -c "$(curl -sL https://git.io/vokNn)"
        sudo -E apt-fast -y -qq install asciidoc bash bcc bin86 binutils bison bzip2 clang llvm file flex g++ g++-multilib gawk gcc-multilib gettext git gzip help2man intltool libboost-dev libelf-dev libncurses-dev libssl-dev libthread-queue-any-perl libusb-dev libxml-parser-perl make patch perl-modules python3-dev python3-pip python3-pyelftools python3-setuptools rsync sharutils swig time unzip util-linux wget xsltproc zlib1g-dev zip zstd
        sudo -E apt-fast -y -qq install dos2unix dwarves quilt npm jq
        sudo -E npm install -g pnpm
        pip3 install --user -U pylibfdt
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo -E git config --global user.name 'GitHub Actions' && git config --global user.email 'noreply@github.com'
        sudo -E git config --global core.abbrev auto
        df -h
    - name: Prepare Mixedwrt
      run: |
        sudo chown -R runner:runner /home/runner/work/testnano
        cp -r ./SCRIPTS/R4S/. ./SCRIPTS/
        cp -r ./SCRIPTS/. ./
        /bin/bash 01_get_ready.sh
    - name: Prepare Package
      run: |
        cd openwrt
        cp -r ../SCRIPTS/. ./
        /bin/bash 02_prepare_package_FW3.sh
        /bin/bash 02_target_only.sh
        /bin/bash 04_remove_upx.sh
    - name: Convert Translation
      run: |
        cd openwrt
        /bin/bash 03_convert_translation.sh
    - name: Add ACL
      run: |
        cd openwrt
        /bin/bash 05_create_acl_for_luci.sh -a
    - name: Fix Permissions
      run: |
        cd openwrt
        sudo -E chmod -R 755 ./07_fix_permissions.sh
        /bin/bash 07_fix_permissions.sh
    - name: Make Config
      run: |
        cd openwrt
        cp -rf ../SEED/R4S/configfw3.seed .config
        make defconfig
    - name: Get Architecture
      working-directory: ${{ github.workspace }}/openwrt
      run: |
        TARGET_DEVICE_ARCH="$(grep "^CONFIG_TARGET_.*_.*=y$" ".config" | head -n 1 | sed 's/^CONFIG_TARGET_//g' | awk -F '_' '{print $1}')"
        echo "TARGET_DEVICE_ARCH=${TARGET_DEVICE_ARCH}-3399" >>$GITHUB_ENV
        latest_release="$(curl -s https://github.com/openwrt/openwrt/tags | grep -Eo "v[0-9\.]+\-*r*c*[0-9]*.tar.gz" | sed -n '/[2-9][3-9]/p' | sed -n 1p | sed 's/.tar.gz//g' | sed 's/v//g')"
        echo "latest_release=${latest_release}" >>$GITHUB_ENV
    - name: Cache
      uses: HiGarfield/cachewrtbuild@main
      with:
        mixkey: ${{ env.TARGET_DEVICE_ARCH }}
        prefix: ${{ github.workspace }}/openwrt
    - name: Make Download
      run: |
        cd openwrt
        make download -j50
    - name: Compile Openwrt
      id: compileopenwrt
      continue-on-error: true
      run: |
        cd openwrt
        #echo | make kernel_oldconfig -j$(($(nproc) + 1))
        IGNORE_ERRORS=1 make -j$(($(nproc) + 1))
        echo $?
    - name: If Error
      if: steps.compileopenwrt.outcome == 'failure'
      run: |
        cat openwrt/.config
        echo '================================================================'
        cd openwrt && make -j1 V=s
    - name: Copy config
      run: |
        cd openwrt
        cp .config bin/targets/rockchip/armv8/allconfig.bak
        cp -rf bin/packages/aarch64_generic bin/targets/rockchip/armv8/aarch64_generic
    - name: Move packages to publish
      run: |
        mkdir -p publish
        mv openwrt/bin/targets/rockchip/armv8/* ./publish/
    - name: Git push assets to "release" branch
      run: |
        cd publish || exit 1
        ls
        git init
        git config --local user.name "github-actions[bot]"
        git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git checkout -b release-r4s-openwrt-fw3-v23.05.5-test
        git add -A
        git commit -m "v23.05.5"
        git remote add testnano "https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}"
        git push -f -u testnano release-r4s-openwrt-fw3-v23.05.5-test
